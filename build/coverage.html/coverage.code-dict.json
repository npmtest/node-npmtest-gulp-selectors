{"/home/travis/build/npmtest/node-npmtest-gulp-selectors/test.js":"/* istanbul instrument in package npmtest_gulp_selectors */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-selectors/lib.npmtest_gulp_selectors.js":"/* istanbul instrument in package npmtest_gulp_selectors */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_selectors = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_selectors = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-selectors/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-selectors && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_selectors */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_selectors\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_selectors.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_selectors.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_selectors.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_selectors.__dirname + '/lib.npmtest_gulp_selectors.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-selectors/node_modules/gulp-selectors/index.js":"'use strict';\nvar es = require('event-stream'),\n\t_ = require('lodash'),\n\tutils = require('gulp-util'),\n\tprocessorUtils = require('./lib/utils/processor-utils'),\n\tLibrary = require('./lib/utils/library');\n\nvar classLibrary,\n\tidLibrary;\n\nmodule.exports = {\n\trun: run,\n\tminify: run,\n\tinfo: info\n};\n\nfunction run(processors, ignores) {\n\t//initialize ignores\n\tignores = _.extend({classes: [], ids: []}, ignores);\n\n\t//ensure processor names are set as expected\n\tprocessors = processorUtils.extendDefaults(processors);\n\n\t//build new libraries to use\n\tclassLibrary = new Library(ignores.classes || []);\n\tidLibrary = new Library(ignores.ids || []);\n\n\t/**\n\t * Main task for mini selectors uglify classes. Processes files based on type.\n\t *\n\t * @param file Stream from es.map\n\t * @param callback for es.map\n\t */\n\tfunction miniSelectors(file, callback) {\n\t\tvar extensions = file.path.split('.'),\n\t\t\textension = extensions[extensions.length - 1],\n\t\t\treducedFile = String(file.contents);\n\n\t\tprocessorUtils.getForExtension(processors, extension).forEach(function(processor) {\n\t\t\treducedFile = processor(reducedFile, classLibrary, idLibrary);\n\t\t});\n\n\t\tfile.contents = new Buffer(reducedFile);\n\t\tcallback(null, file);\n\t}\n\n\treturn es.map(miniSelectors);\n}\n\nfunction info() {\n\treturn es.map(function(file, callback) {\n\t\tutils.log(file.history[0]);\n\t\tutils.log('Class library:', classLibrary.stats());\n\t\tutils.log('ID library:', idLibrary.stats());\n\t\tcallback(null, file);\n\t});\n}","/home/travis/build/npmtest/node-npmtest-gulp-selectors/node_modules/gulp-selectors/lib/utils/processor-utils.js":"var _ = require('lodash');\n\nmodule.exports = {\n\textendDefaults: extendDefaults,\n\tgetForExtension: getProcessorsForExtension\n};\n\nfunction extendDefaults(processors) {\n\n\tprocessors = _.extend({\n\t\tcss: ['css'],\n\t\thtml: ['html']\n\t}, processors);\n\n\treturn processors;\n}\n\nfunction getProcessorsForExtension(processors, extension) {\n\tvar selectedProcessors = [];\n\n\tfor (var processor in processors) {\n\t\tif (typeof processors[processor] === 'object' &&\n\t\t\tprocessors[processor].indexOf(extension) > -1) {\n\t\t\tswitch (processor) {\n\t\t\t\t//these guys are special since they're built in\n\t\t\t\tcase 'css':\n\t\t\t\tcase 'html':\n\t\t\t\tcase 'js-strings':\n\t\t\t\tcase 'remove-unused':\n\t\t\t\t\tselectedProcessors.push(require('../processors/' + processor));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tselectedProcessors.push(require(processor));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn selectedProcessors;\n}","/home/travis/build/npmtest/node-npmtest-gulp-selectors/node_modules/gulp-selectors/lib/utils/library.js":"var _ = require('lodash'),\n\tmultimatch = require('multimatch'),\n\tgenerateShortname = require('./generate-shortname');\n\n/**\n * Provides libraries.\n */\nmodule.exports = Library;\n\n/**\n * This handy function returns an empty library. This should be a module on its own so that the\n * logic of retrieving a library does not get mixed up with the library logic itself.\n *\n * @returns {object} Library\n * @constructor\n */\nfunction Library(ignores) {\n\tvar _library = {},\n\t\t_ignores = ignores || [],\n\t\tsize = 0;\n\n\t/**\n\t * Tests if a value exists in the library.\n\t *\n\t * @params {string} name\n\t * @returns {boolean} Bool for if it exists\n\t */\n\tthis.has = function(name) {\n\t\treturn _library[name] !== undefined;\n\t};\n\n\t/**\n\t * Ensures the name is set and returns it. If generates an ignored name,\n\t * will increase size and try again\n\t *\n\t * @param name String name to get shortname for from the library\n\t * @param dontCount Bool to not to count this as a use in the code\n\t * @returns {string} Shortname of the minified name\n\t */\n\tthis.get = function(name, dontCount) {\n\t\t//catch all for ignoring IDs\n\t\tif (ignores === true) return name;\n\n\t\tvar shortname;\n\n\t\tif (_library[name]) {\n\t\t\tshortname = _library[name].shortname;\n\t\t\tif (!dontCount) {\n\t\t\t\t_library[name].hits++;\n\t\t\t}\n\t\t} else if (!multimatch(name, _ignores).length) {\n\t\t\tdo {\n\t\t\t\tshortname = generateShortname(size);\n\t\t\t\tsize++;\n\t\t\t} while (~_ignores.indexOf(shortname));\n\n\t\t\t_library[name] = {\n\t\t\t\tshortname: shortname,\n\t\t\t\thits: dontCount ? 0 : 1\n\t\t\t};\n\t\t} else {\n\t\t\tshortname = name;\n\t\t}\n\n\t\treturn shortname;\n\t};\n\n\t/**\n\t * Returns all of the shortnames in the library.\n\t * Does not count towards usage.\n\t *\n\t * @returns {array} Of all shortnames.\n\t */\n\tthis.getAll = function() {\n\t\treturn _.pluck(_library, 'shortname');\n\t};\n\n\t/**\n\t * Retrieves shortnames which are not used in the code processed.\n\t *\n\t * @returns {array} Of unused names\n\t */\n\tthis.getUnused = function() {\n\t\treturn _.pluck(\n\t\t\t_.filter(\n\t\t\t\t_library,\n\t\t\t\tfunction(entry) {\n\t\t\t\t\treturn entry.hits === 0;\n\t\t\t\t}), 'shortname');\n\t};\n\n\t/**\n\t * Returns the size of the library.\n\t *\n\t * @returns {number} Number of entries in the library\n\t */\n\tthis.size = function() {\n\t\treturn size;\n\t};\n\n\t/**\n\t * Returns the full selector names which have been entered so far.\n\t *\n\t * @returns {Array} All full selector names\n\t */\n\tthis.getFullNames = function() {\n\t\treturn Object.keys(_library);\n\t};\n\n\tthis.stats = function() {\n\t\treturn {\n\t\t\tsize: this.size(),\n\t\t\tunused: this.getUnused().length\n\t\t};\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-gulp-selectors/node_modules/gulp-selectors/lib/utils/generate-shortname.js":"module.exports = generateShortname;\n\n\t/**\n * Helper function for generating shortnames based on an alphabetic library.\n *\n * @param seed Integer\n * @returns {string Shortname}\n */\nfunction generateShortname(seed) {\n\tif (seed !== parseInt(seed, 10)) {\n\t\tthrow new Error('Seed must be a number');\n\t}\n\n\tif (seed < 0) {\n\t\tthrow new Error('Seed must be at least 0');\n\t}\n\n\tvar library = 'abcdefghijklmnopqrstuvwxyz',\n\t\tlibraryLength = library.length,\n\t\tprefix = '';\n\t//break the seed down if it is larger than the library\n\tif (seed >= libraryLength) {\n\t\tprefix = generateShortname(Math.floor(seed / libraryLength) - 1);\n\t}\n\t//return the prefixed shortname\n\treturn prefix + library[seed % libraryLength];\n}"}